// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aiocean/config/v1/config_service.proto

package aiocean_config_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetSecretConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSecretConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// GetSecretConfigRequestValidationError is the validation error returned by
// GetSecretConfigRequest.Validate if the designated constraints aren't met.
type GetSecretConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretConfigRequestValidationError) ErrorName() string {
	return "GetSecretConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecretConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretConfigRequestValidationError{}

// Validate checks the field values on GetSecretConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSecretConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecretConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSecretConfigResponseValidationError is the validation error returned by
// GetSecretConfigResponse.Validate if the designated constraints aren't met.
type GetSecretConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretConfigResponseValidationError) ErrorName() string {
	return "GetSecretConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecretConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretConfigResponseValidationError{}

// Validate checks the field values on GetMongoConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMongoConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// GetMongoConfigRequestValidationError is the validation error returned by
// GetMongoConfigRequest.Validate if the designated constraints aren't met.
type GetMongoConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMongoConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMongoConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMongoConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMongoConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMongoConfigRequestValidationError) ErrorName() string {
	return "GetMongoConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMongoConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMongoConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMongoConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMongoConfigRequestValidationError{}

// Validate checks the field values on GetMongoConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMongoConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMongoConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMongoConfigResponseValidationError is the validation error returned by
// GetMongoConfigResponse.Validate if the designated constraints aren't met.
type GetMongoConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMongoConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMongoConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMongoConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMongoConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMongoConfigResponseValidationError) ErrorName() string {
	return "GetMongoConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMongoConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMongoConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMongoConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMongoConfigResponseValidationError{}

// Validate checks the field values on GetShopifyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetShopifyConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// GetShopifyConfigRequestValidationError is the validation error returned by
// GetShopifyConfigRequest.Validate if the designated constraints aren't met.
type GetShopifyConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopifyConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopifyConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopifyConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopifyConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopifyConfigRequestValidationError) ErrorName() string {
	return "GetShopifyConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopifyConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopifyConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopifyConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopifyConfigRequestValidationError{}

// Validate checks the field values on GetShopifyConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetShopifyConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShopifyConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetShopifyConfigResponseValidationError is the validation error returned by
// GetShopifyConfigResponse.Validate if the designated constraints aren't met.
type GetShopifyConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopifyConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopifyConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopifyConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopifyConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopifyConfigResponseValidationError) ErrorName() string {
	return "GetShopifyConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopifyConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopifyConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopifyConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopifyConfigResponseValidationError{}
