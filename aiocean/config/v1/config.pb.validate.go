// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aiocean/config/v1/config.proto

package aiocean_config_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on MongoConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MongoConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	// no validation rules for Name

	// no validation rules for ConnectUri

	// no validation rules for DatabaseName

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoConfigValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoConfigValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoConfigValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MongoConfigValidationError is the validation error returned by
// MongoConfig.Validate if the designated constraints aren't met.
type MongoConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoConfigValidationError) ErrorName() string { return "MongoConfigValidationError" }

// Error satisfies the builtin error interface
func (e MongoConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoConfigValidationError{}

// Validate checks the field values on ShopifyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShopifyConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	// no validation rules for Name

	// no validation rules for ApiKey

	// no validation rules for RedirectUri

	// no validation rules for ApiSecretKey

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShopifyConfigValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShopifyConfigValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShopifyConfigValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ShopifyConfigValidationError is the validation error returned by
// ShopifyConfig.Validate if the designated constraints aren't met.
type ShopifyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopifyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopifyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopifyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopifyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopifyConfigValidationError) ErrorName() string { return "ShopifyConfigValidationError" }

// Error satisfies the builtin error interface
func (e ShopifyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopifyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopifyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopifyConfigValidationError{}

// Validate checks the field values on SecretConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SecretConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	for key, val := range m.GetSecrets() {
		_ = val

		// no validation rules for Secrets[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretConfigValidationError{
					field:  fmt.Sprintf("Secrets[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SecretConfigValidationError is the validation error returned by
// SecretConfig.Validate if the designated constraints aren't met.
type SecretConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretConfigValidationError) ErrorName() string { return "SecretConfigValidationError" }

// Error satisfies the builtin error interface
func (e SecretConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretConfigValidationError{}

// Validate checks the field values on JwtSecret with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JwtSecret) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SignKey

	return nil
}

// JwtSecretValidationError is the validation error returned by
// JwtSecret.Validate if the designated constraints aren't met.
type JwtSecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtSecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtSecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtSecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtSecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtSecretValidationError) ErrorName() string { return "JwtSecretValidationError" }

// Error satisfies the builtin error interface
func (e JwtSecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtSecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtSecretValidationError{}

// Validate checks the field values on WebAppConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WebAppConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebAppConfigValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebAppConfigValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebAppConfigValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WebAppConfigValidationError is the validation error returned by
// WebAppConfig.Validate if the designated constraints aren't met.
type WebAppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebAppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebAppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebAppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebAppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebAppConfigValidationError) ErrorName() string { return "WebAppConfigValidationError" }

// Error satisfies the builtin error interface
func (e WebAppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebAppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebAppConfigValidationError{}

// Validate checks the field values on MobileAppConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MobileAppConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MobileAppConfigValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MobileAppConfigValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MobileAppConfigValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MobileAppConfigValidationError is the validation error returned by
// MobileAppConfig.Validate if the designated constraints aren't met.
type MobileAppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MobileAppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MobileAppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MobileAppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MobileAppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MobileAppConfigValidationError) ErrorName() string { return "MobileAppConfigValidationError" }

// Error satisfies the builtin error interface
func (e MobileAppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMobileAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MobileAppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MobileAppConfigValidationError{}
