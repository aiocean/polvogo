// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aiocean/user/v1/user_service.proto

package aiocean_user_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on UnlinkExternalAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlinkExternalAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// UnlinkExternalAccountRequestValidationError is the validation error returned
// by UnlinkExternalAccountRequest.Validate if the designated constraints
// aren't met.
type UnlinkExternalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkExternalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkExternalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkExternalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkExternalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkExternalAccountRequestValidationError) ErrorName() string {
	return "UnlinkExternalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkExternalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkExternalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkExternalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkExternalAccountRequestValidationError{}

// Validate checks the field values on UnlinkExternalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlinkExternalAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnlinkExternalAccountResponseValidationError is the validation error
// returned by UnlinkExternalAccountResponse.Validate if the designated
// constraints aren't met.
type UnlinkExternalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkExternalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkExternalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkExternalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkExternalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkExternalAccountResponseValidationError) ErrorName() string {
	return "UnlinkExternalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkExternalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkExternalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkExternalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkExternalAccountResponseValidationError{}

// Validate checks the field values on LinkExternalAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkExternalAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// LinkExternalAccountRequestValidationError is the validation error returned
// by LinkExternalAccountRequest.Validate if the designated constraints aren't met.
type LinkExternalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkExternalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkExternalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkExternalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkExternalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkExternalAccountRequestValidationError) ErrorName() string {
	return "LinkExternalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkExternalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkExternalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkExternalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkExternalAccountRequestValidationError{}

// Validate checks the field values on LinkExternalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkExternalAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LinkExternalAccountResponseValidationError is the validation error returned
// by LinkExternalAccountResponse.Validate if the designated constraints
// aren't met.
type LinkExternalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkExternalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkExternalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkExternalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkExternalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkExternalAccountResponseValidationError) ErrorName() string {
	return "LinkExternalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkExternalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkExternalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkExternalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkExternalAccountResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetUserByOrnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByOrnRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Orn

	return nil
}

// GetUserByOrnRequestValidationError is the validation error returned by
// GetUserByOrnRequest.Validate if the designated constraints aren't met.
type GetUserByOrnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByOrnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByOrnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByOrnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByOrnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByOrnRequestValidationError) ErrorName() string {
	return "GetUserByOrnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByOrnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByOrnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByOrnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByOrnRequestValidationError{}

// Validate checks the field values on GetUserByOrnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByOrnResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByOrnResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserByOrnResponseValidationError is the validation error returned by
// GetUserByOrnResponse.Validate if the designated constraints aren't met.
type GetUserByOrnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByOrnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByOrnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByOrnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByOrnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByOrnResponseValidationError) ErrorName() string {
	return "GetUserByOrnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByOrnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByOrnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByOrnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByOrnResponseValidationError{}
