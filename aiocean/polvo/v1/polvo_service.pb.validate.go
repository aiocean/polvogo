// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aiocean/polvo/v1/polvo_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetManifestUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetManifestUrlRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetManifestUrlRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return GetManifestUrlRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+/versions/[^/]+$\"",
		}
	}

	return nil
}

// GetManifestUrlRequestValidationError is the validation error returned by
// GetManifestUrlRequest.Validate if the designated constraints aren't met.
type GetManifestUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManifestUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManifestUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManifestUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManifestUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManifestUrlRequestValidationError) ErrorName() string {
	return "GetManifestUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetManifestUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManifestUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManifestUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManifestUrlRequestValidationError{}

var _GetManifestUrlRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+/versions/[^/]+$")

// Validate checks the field values on GetManifestUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetManifestUrlResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ManifestUrl

	return nil
}

// GetManifestUrlResponseValidationError is the validation error returned by
// GetManifestUrlResponse.Validate if the designated constraints aren't met.
type GetManifestUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManifestUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManifestUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManifestUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManifestUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManifestUrlResponseValidationError) ErrorName() string {
	return "GetManifestUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetManifestUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManifestUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManifestUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManifestUrlResponseValidationError{}

// Validate checks the field values on DeletePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeletePackageRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return DeletePackageRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+$\"",
		}
	}

	return nil
}

// DeletePackageRequestValidationError is the validation error returned by
// DeletePackageRequest.Validate if the designated constraints aren't met.
type DeletePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackageRequestValidationError) ErrorName() string {
	return "DeletePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackageRequestValidationError{}

var _DeletePackageRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+$")

// Validate checks the field values on DeletePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// DeletePackageResponseValidationError is the validation error returned by
// DeletePackageResponse.Validate if the designated constraints aren't met.
type DeletePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackageResponseValidationError) ErrorName() string {
	return "DeletePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackageResponseValidationError{}

// Validate checks the field values on ListPackagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPackagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListPackagesRequestValidationError is the validation error returned by
// ListPackagesRequest.Validate if the designated constraints aren't met.
type ListPackagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackagesRequestValidationError) ErrorName() string {
	return "ListPackagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackagesRequestValidationError{}

// Validate checks the field values on ListPackagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPackagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPackages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPackagesResponseValidationError{
					field:  fmt.Sprintf("Packages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPackagesResponseValidationError is the validation error returned by
// ListPackagesResponse.Validate if the designated constraints aren't met.
type ListPackagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPackagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPackagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPackagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPackagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPackagesResponseValidationError) ErrorName() string {
	return "ListPackagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPackagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPackagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPackagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPackagesResponseValidationError{}

// Validate checks the field values on GetPackageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetPackageRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return GetPackageRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+$\"",
		}
	}

	return nil
}

// GetPackageRequestValidationError is the validation error returned by
// GetPackageRequest.Validate if the designated constraints aren't met.
type GetPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageRequestValidationError) ErrorName() string {
	return "GetPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageRequestValidationError{}

var _GetPackageRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+$")

// Validate checks the field values on GetPackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPackageResponseValidationError is the validation error returned by
// GetPackageResponse.Validate if the designated constraints aren't met.
type GetPackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackageResponseValidationError) ErrorName() string {
	return "GetPackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackageResponseValidationError{}

// Validate checks the field values on CreatePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePackageRequestValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePackageRequestValidationError is the validation error returned by
// CreatePackageRequest.Validate if the designated constraints aren't met.
type CreatePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageRequestValidationError) ErrorName() string {
	return "CreatePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageRequestValidationError{}

// Validate checks the field values on CreatePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePackageResponseValidationError is the validation error returned by
// CreatePackageResponse.Validate if the designated constraints aren't met.
type CreatePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackageResponseValidationError) ErrorName() string {
	return "CreatePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackageResponseValidationError{}

// Validate checks the field values on ListVersionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVersionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListVersionsRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return ListVersionsRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+$\"",
		}
	}

	return nil
}

// ListVersionsRequestValidationError is the validation error returned by
// ListVersionsRequest.Validate if the designated constraints aren't met.
type ListVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVersionsRequestValidationError) ErrorName() string {
	return "ListVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVersionsRequestValidationError{}

var _ListVersionsRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+$")

// Validate checks the field values on ListVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVersionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListVersionsResponseValidationError is the validation error returned by
// ListVersionsResponse.Validate if the designated constraints aren't met.
type ListVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVersionsResponseValidationError) ErrorName() string {
	return "ListVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVersionsResponseValidationError{}

// Validate checks the field values on GetVersionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetVersionRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return GetVersionRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+/versions/[^/]+$\"",
		}
	}

	return nil
}

// GetVersionRequestValidationError is the validation error returned by
// GetVersionRequest.Validate if the designated constraints aren't met.
type GetVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionRequestValidationError) ErrorName() string {
	return "GetVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionRequestValidationError{}

var _GetVersionRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+/versions/[^/]+$")

// Validate checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVersionResponseValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVersionResponseValidationError is the validation error returned by
// GetVersionResponse.Validate if the designated constraints aren't met.
type GetVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionResponseValidationError) ErrorName() string {
	return "GetVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionResponseValidationError{}

// Validate checks the field values on CreateVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CreateVersionRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return CreateVersionRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+$\"",
		}
	}

	if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVersionRequestValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVersionRequestValidationError is the validation error returned by
// CreateVersionRequest.Validate if the designated constraints aren't met.
type CreateVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVersionRequestValidationError) ErrorName() string {
	return "CreateVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVersionRequestValidationError{}

var _CreateVersionRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+$")

// Validate checks the field values on CreateVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVersionResponseValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVersionResponseValidationError is the validation error returned by
// CreateVersionResponse.Validate if the designated constraints aren't met.
type CreateVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVersionResponseValidationError) ErrorName() string {
	return "CreateVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVersionResponseValidationError{}

// Validate checks the field values on UpdatePackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePackageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPackage() == nil {
		return UpdatePackageRequestValidationError{
			field:  "Package",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackageRequestValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUpdateMask() == nil {
		return UpdatePackageRequestValidationError{
			field:  "UpdateMask",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackageRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if !_UpdatePackageRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return UpdatePackageRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+$\"",
		}
	}

	return nil
}

// UpdatePackageRequestValidationError is the validation error returned by
// UpdatePackageRequest.Validate if the designated constraints aren't met.
type UpdatePackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackageRequestValidationError) ErrorName() string {
	return "UpdatePackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackageRequestValidationError{}

var _UpdatePackageRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+$")

// Validate checks the field values on UpdatePackageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePackageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPackage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePackageResponseValidationError{
				field:  "Package",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePackageResponseValidationError is the validation error returned by
// UpdatePackageResponse.Validate if the designated constraints aren't met.
type UpdatePackageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackageResponseValidationError) ErrorName() string {
	return "UpdatePackageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackageResponseValidationError{}

// Validate checks the field values on UpdateVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateVersionRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return UpdateVersionRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+/versions/[^/]+$\"",
		}
	}

	if m.GetVersion() == nil {
		return UpdateVersionRequestValidationError{
			field:  "Version",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVersionRequestValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUpdateMask() == nil {
		return UpdateVersionRequestValidationError{
			field:  "UpdateMask",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVersionRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVersionRequestValidationError is the validation error returned by
// UpdateVersionRequest.Validate if the designated constraints aren't met.
type UpdateVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVersionRequestValidationError) ErrorName() string {
	return "UpdateVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVersionRequestValidationError{}

var _UpdateVersionRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+/versions/[^/]+$")

// Validate checks the field values on DeleteVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DeleteVersionRequest_Orn_Pattern.MatchString(m.GetOrn()) {
		return DeleteVersionRequestValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^packages/[^/]+/versions/[^/]+$\"",
		}
	}

	return nil
}

// DeleteVersionRequestValidationError is the validation error returned by
// DeleteVersionRequest.Validate if the designated constraints aren't met.
type DeleteVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVersionRequestValidationError) ErrorName() string {
	return "DeleteVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVersionRequestValidationError{}

var _DeleteVersionRequest_Orn_Pattern = regexp.MustCompile("(?m)^packages/[^/]+/versions/[^/]+$")

// Validate checks the field values on DeleteVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// DeleteVersionResponseValidationError is the validation error returned by
// DeleteVersionResponse.Validate if the designated constraints aren't met.
type DeleteVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVersionResponseValidationError) ErrorName() string {
	return "DeleteVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVersionResponseValidationError{}

// Validate checks the field values on UpdateVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVersionResponseValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVersionResponseValidationError is the validation error returned by
// UpdateVersionResponse.Validate if the designated constraints aren't met.
type UpdateVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVersionResponseValidationError) ErrorName() string {
	return "UpdateVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVersionResponseValidationError{}
