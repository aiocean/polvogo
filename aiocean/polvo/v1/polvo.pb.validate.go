// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aiocean/polvo/v1/polvo.proto

package aiocean_polvo_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Package) Validate() error {
	if m == nil {
		return nil
	}

	if !_Package_Orn_Pattern.MatchString(m.GetOrn()) {
		return PackageValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^polvo.aiocean.services/applications/[^/]+/packages/[^/]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		return PackageValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := Package_Status_name[int32(m.GetStatus())]; !ok {
		return PackageValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Maintainer

	return nil
}

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

var _Package_Orn_Pattern = regexp.MustCompile("(?m)^polvo.aiocean.services/applications/[^/]+/packages/[^/]+$")

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Version) Validate() error {
	if m == nil {
		return nil
	}

	if !_Version_Orn_Pattern.MatchString(m.GetOrn()) {
		return VersionValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^polvo.aiocean.services/applications/[^/]+/packages/[^/]+/versions/[^/]+$\"",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		return VersionValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_Version_EntryPointUrl_Pattern.MatchString(m.GetEntryPointUrl()) {
		return VersionValidationError{
			field:  "EntryPointUrl",
			reason: "value does not match regex pattern \"(?m)https://polvo.aiocean.services/applications/[^/]+/packages/[^/]+/versions/[^/]+/index.js\"",
		}
	}

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VersionValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}

var _Version_Orn_Pattern = regexp.MustCompile("(?m)^polvo.aiocean.services/applications/[^/]+/packages/[^/]+/versions/[^/]+$")

var _Version_EntryPointUrl_Pattern = regexp.MustCompile("(?m)https://polvo.aiocean.services/applications/[^/]+/packages/[^/]+/versions/[^/]+/index.js")

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Module) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ModuleValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		return ModuleValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on Build with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Build) Validate() error {
	if m == nil {
		return nil
	}

	if !_Build_Orn_Pattern.MatchString(m.GetOrn()) {
		return BuildValidationError{
			field:  "Orn",
			reason: "value does not match regex pattern \"(?m)^polvo.aiocean.services/applications/[^/]+/packages/[^/]+/versions/[^/]+/builds/[^/]+$\"",
		}
	}

	if _, ok := Build_Status_name[int32(m.GetStatus())]; !ok {
		return BuildValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// BuildValidationError is the validation error returned by Build.Validate if
// the designated constraints aren't met.
type BuildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildValidationError) ErrorName() string { return "BuildValidationError" }

// Error satisfies the builtin error interface
func (e BuildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildValidationError{}

var _Build_Orn_Pattern = regexp.MustCompile("(?m)^polvo.aiocean.services/applications/[^/]+/packages/[^/]+/versions/[^/]+/builds/[^/]+$")
