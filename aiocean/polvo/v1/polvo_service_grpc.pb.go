// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolvoServiceClient is the client API for PolvoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolvoServiceClient interface {
	CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (PolvoService_CreatePackageClient, error)
	UpdatePackage(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*UpdatePackageResponse, error)
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	GetManifestUrl(ctx context.Context, in *GetManifestUrlRequest, opts ...grpc.CallOption) (*GetManifestUrlResponse, error)
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (PolvoService_ListPackagesClient, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (PolvoService_DeletePackageClient, error)
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (PolvoService_ListVersionsClient, error)
	CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (PolvoService_CreateVersionClient, error)
	UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (PolvoService_UpdateVersionClient, error)
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (PolvoService_DeleteVersionClient, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type polvoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolvoServiceClient(cc grpc.ClientConnInterface) PolvoServiceClient {
	return &polvoServiceClient{cc}
}

func (c *polvoServiceClient) CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (PolvoService_CreatePackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[0], "/aiocean.polvo.v1.PolvoService/CreatePackage", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceCreatePackageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_CreatePackageClient interface {
	Recv() (*CreatePackageResponse, error)
	grpc.ClientStream
}

type polvoServiceCreatePackageClient struct {
	grpc.ClientStream
}

func (x *polvoServiceCreatePackageClient) Recv() (*CreatePackageResponse, error) {
	m := new(CreatePackageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*UpdatePackageResponse, error) {
	out := new(UpdatePackageResponse)
	err := c.cc.Invoke(ctx, "/aiocean.polvo.v1.PolvoService/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polvoServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, "/aiocean.polvo.v1.PolvoService/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polvoServiceClient) GetManifestUrl(ctx context.Context, in *GetManifestUrlRequest, opts ...grpc.CallOption) (*GetManifestUrlResponse, error) {
	out := new(GetManifestUrlResponse)
	err := c.cc.Invoke(ctx, "/aiocean.polvo.v1.PolvoService/GetManifestUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polvoServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (PolvoService_ListPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[1], "/aiocean.polvo.v1.PolvoService/ListPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceListPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_ListPackagesClient interface {
	Recv() (*ListPackagesResponse, error)
	grpc.ClientStream
}

type polvoServiceListPackagesClient struct {
	grpc.ClientStream
}

func (x *polvoServiceListPackagesClient) Recv() (*ListPackagesResponse, error) {
	m := new(ListPackagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (PolvoService_DeletePackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[2], "/aiocean.polvo.v1.PolvoService/DeletePackage", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceDeletePackageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_DeletePackageClient interface {
	Recv() (*DeletePackageResponse, error)
	grpc.ClientStream
}

type polvoServiceDeletePackageClient struct {
	grpc.ClientStream
}

func (x *polvoServiceDeletePackageClient) Recv() (*DeletePackageResponse, error) {
	m := new(DeletePackageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (PolvoService_ListVersionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[3], "/aiocean.polvo.v1.PolvoService/ListVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceListVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_ListVersionsClient interface {
	Recv() (*ListVersionsResponse, error)
	grpc.ClientStream
}

type polvoServiceListVersionsClient struct {
	grpc.ClientStream
}

func (x *polvoServiceListVersionsClient) Recv() (*ListVersionsResponse, error) {
	m := new(ListVersionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (PolvoService_CreateVersionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[4], "/aiocean.polvo.v1.PolvoService/CreateVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceCreateVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_CreateVersionClient interface {
	Recv() (*CreateVersionResponse, error)
	grpc.ClientStream
}

type polvoServiceCreateVersionClient struct {
	grpc.ClientStream
}

func (x *polvoServiceCreateVersionClient) Recv() (*CreateVersionResponse, error) {
	m := new(CreateVersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (PolvoService_UpdateVersionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[5], "/aiocean.polvo.v1.PolvoService/UpdateVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceUpdateVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_UpdateVersionClient interface {
	Recv() (*UpdateVersionResponse, error)
	grpc.ClientStream
}

type polvoServiceUpdateVersionClient struct {
	grpc.ClientStream
}

func (x *polvoServiceUpdateVersionClient) Recv() (*UpdateVersionResponse, error) {
	m := new(UpdateVersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (PolvoService_DeleteVersionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolvoService_ServiceDesc.Streams[6], "/aiocean.polvo.v1.PolvoService/DeleteVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &polvoServiceDeleteVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolvoService_DeleteVersionClient interface {
	Recv() (*DeleteVersionResponse, error)
	grpc.ClientStream
}

type polvoServiceDeleteVersionClient struct {
	grpc.ClientStream
}

func (x *polvoServiceDeleteVersionClient) Recv() (*DeleteVersionResponse, error) {
	m := new(DeleteVersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polvoServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/aiocean.polvo.v1.PolvoService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolvoServiceServer is the server API for PolvoService service.
// All implementations must embed UnimplementedPolvoServiceServer
// for forward compatibility
type PolvoServiceServer interface {
	CreatePackage(*CreatePackageRequest, PolvoService_CreatePackageServer) error
	UpdatePackage(context.Context, *UpdatePackageRequest) (*UpdatePackageResponse, error)
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	GetManifestUrl(context.Context, *GetManifestUrlRequest) (*GetManifestUrlResponse, error)
	ListPackages(*ListPackagesRequest, PolvoService_ListPackagesServer) error
	DeletePackage(*DeletePackageRequest, PolvoService_DeletePackageServer) error
	ListVersions(*ListVersionsRequest, PolvoService_ListVersionsServer) error
	CreateVersion(*CreateVersionRequest, PolvoService_CreateVersionServer) error
	UpdateVersion(*UpdateVersionRequest, PolvoService_UpdateVersionServer) error
	DeleteVersion(*DeleteVersionRequest, PolvoService_DeleteVersionServer) error
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	mustEmbedUnimplementedPolvoServiceServer()
}

// UnimplementedPolvoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolvoServiceServer struct {
}

func (UnimplementedPolvoServiceServer) CreatePackage(*CreatePackageRequest, PolvoService_CreatePackageServer) error {
	return status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedPolvoServiceServer) UpdatePackage(context.Context, *UpdatePackageRequest) (*UpdatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedPolvoServiceServer) GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedPolvoServiceServer) GetManifestUrl(context.Context, *GetManifestUrlRequest) (*GetManifestUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifestUrl not implemented")
}
func (UnimplementedPolvoServiceServer) ListPackages(*ListPackagesRequest, PolvoService_ListPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedPolvoServiceServer) DeletePackage(*DeletePackageRequest, PolvoService_DeletePackageServer) error {
	return status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedPolvoServiceServer) ListVersions(*ListVersionsRequest, PolvoService_ListVersionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedPolvoServiceServer) CreateVersion(*CreateVersionRequest, PolvoService_CreateVersionServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateVersion not implemented")
}
func (UnimplementedPolvoServiceServer) UpdateVersion(*UpdateVersionRequest, PolvoService_UpdateVersionServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateVersion not implemented")
}
func (UnimplementedPolvoServiceServer) DeleteVersion(*DeleteVersionRequest, PolvoService_DeleteVersionServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteVersion not implemented")
}
func (UnimplementedPolvoServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedPolvoServiceServer) mustEmbedUnimplementedPolvoServiceServer() {}

// UnsafePolvoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolvoServiceServer will
// result in compilation errors.
type UnsafePolvoServiceServer interface {
	mustEmbedUnimplementedPolvoServiceServer()
}

func RegisterPolvoServiceServer(s grpc.ServiceRegistrar, srv PolvoServiceServer) {
	s.RegisterService(&PolvoService_ServiceDesc, srv)
}

func _PolvoService_CreatePackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreatePackageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).CreatePackage(m, &polvoServiceCreatePackageServer{stream})
}

type PolvoService_CreatePackageServer interface {
	Send(*CreatePackageResponse) error
	grpc.ServerStream
}

type polvoServiceCreatePackageServer struct {
	grpc.ServerStream
}

func (x *polvoServiceCreatePackageServer) Send(m *CreatePackageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolvoServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aiocean.polvo.v1.PolvoService/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolvoServiceServer).UpdatePackage(ctx, req.(*UpdatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolvoService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolvoServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aiocean.polvo.v1.PolvoService/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolvoServiceServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolvoService_GetManifestUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManifestUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolvoServiceServer).GetManifestUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aiocean.polvo.v1.PolvoService/GetManifestUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolvoServiceServer).GetManifestUrl(ctx, req.(*GetManifestUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolvoService_ListPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPackagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).ListPackages(m, &polvoServiceListPackagesServer{stream})
}

type PolvoService_ListPackagesServer interface {
	Send(*ListPackagesResponse) error
	grpc.ServerStream
}

type polvoServiceListPackagesServer struct {
	grpc.ServerStream
}

func (x *polvoServiceListPackagesServer) Send(m *ListPackagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_DeletePackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeletePackageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).DeletePackage(m, &polvoServiceDeletePackageServer{stream})
}

type PolvoService_DeletePackageServer interface {
	Send(*DeletePackageResponse) error
	grpc.ServerStream
}

type polvoServiceDeletePackageServer struct {
	grpc.ServerStream
}

func (x *polvoServiceDeletePackageServer) Send(m *DeletePackageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_ListVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).ListVersions(m, &polvoServiceListVersionsServer{stream})
}

type PolvoService_ListVersionsServer interface {
	Send(*ListVersionsResponse) error
	grpc.ServerStream
}

type polvoServiceListVersionsServer struct {
	grpc.ServerStream
}

func (x *polvoServiceListVersionsServer) Send(m *ListVersionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_CreateVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateVersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).CreateVersion(m, &polvoServiceCreateVersionServer{stream})
}

type PolvoService_CreateVersionServer interface {
	Send(*CreateVersionResponse) error
	grpc.ServerStream
}

type polvoServiceCreateVersionServer struct {
	grpc.ServerStream
}

func (x *polvoServiceCreateVersionServer) Send(m *CreateVersionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_UpdateVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateVersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).UpdateVersion(m, &polvoServiceUpdateVersionServer{stream})
}

type PolvoService_UpdateVersionServer interface {
	Send(*UpdateVersionResponse) error
	grpc.ServerStream
}

type polvoServiceUpdateVersionServer struct {
	grpc.ServerStream
}

func (x *polvoServiceUpdateVersionServer) Send(m *UpdateVersionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_DeleteVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteVersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolvoServiceServer).DeleteVersion(m, &polvoServiceDeleteVersionServer{stream})
}

type PolvoService_DeleteVersionServer interface {
	Send(*DeleteVersionResponse) error
	grpc.ServerStream
}

type polvoServiceDeleteVersionServer struct {
	grpc.ServerStream
}

func (x *polvoServiceDeleteVersionServer) Send(m *DeleteVersionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PolvoService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolvoServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aiocean.polvo.v1.PolvoService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolvoServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolvoService_ServiceDesc is the grpc.ServiceDesc for PolvoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolvoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aiocean.polvo.v1.PolvoService",
	HandlerType: (*PolvoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePackage",
			Handler:    _PolvoService_UpdatePackage_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _PolvoService_GetPackage_Handler,
		},
		{
			MethodName: "GetManifestUrl",
			Handler:    _PolvoService_GetManifestUrl_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _PolvoService_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreatePackage",
			Handler:       _PolvoService_CreatePackage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPackages",
			Handler:       _PolvoService_ListPackages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeletePackage",
			Handler:       _PolvoService_DeletePackage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListVersions",
			Handler:       _PolvoService_ListVersions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateVersion",
			Handler:       _PolvoService_CreateVersion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateVersion",
			Handler:       _PolvoService_UpdateVersion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteVersion",
			Handler:       _PolvoService_DeleteVersion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aiocean/polvo/v1/polvo_service.proto",
}
