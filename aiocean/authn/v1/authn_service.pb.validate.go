// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aiocean/authn/v1/authn_service.proto

package aiocean_authn_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LoginWithShopifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginWithShopifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Shop

	return nil
}

// LoginWithShopifyRequestValidationError is the validation error returned by
// LoginWithShopifyRequest.Validate if the designated constraints aren't met.
type LoginWithShopifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithShopifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithShopifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithShopifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithShopifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithShopifyRequestValidationError) ErrorName() string {
	return "LoginWithShopifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithShopifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithShopifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithShopifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithShopifyRequestValidationError{}

// Validate checks the field values on LoginWithShopifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginWithShopifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RedirectUrl

	return nil
}

// LoginWithShopifyResponseValidationError is the validation error returned by
// LoginWithShopifyResponse.Validate if the designated constraints aren't met.
type LoginWithShopifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithShopifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithShopifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithShopifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithShopifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithShopifyResponseValidationError) ErrorName() string {
	return "LoginWithShopifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithShopifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithShopifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithShopifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithShopifyResponseValidationError{}

// Validate checks the field values on LoginWithShopifyCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginWithShopifyCallbackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Hmac

	// no validation rules for Timestamp

	// no validation rules for State

	// no validation rules for Shop

	return nil
}

// LoginWithShopifyCallbackRequestValidationError is the validation error
// returned by LoginWithShopifyCallbackRequest.Validate if the designated
// constraints aren't met.
type LoginWithShopifyCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithShopifyCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithShopifyCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithShopifyCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithShopifyCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithShopifyCallbackRequestValidationError) ErrorName() string {
	return "LoginWithShopifyCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithShopifyCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithShopifyCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithShopifyCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithShopifyCallbackRequestValidationError{}

// Validate checks the field values on LoginWithShopifyCallbackResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *LoginWithShopifyCallbackResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Jwt

	return nil
}

// LoginWithShopifyCallbackResponseValidationError is the validation error
// returned by LoginWithShopifyCallbackResponse.Validate if the designated
// constraints aren't met.
type LoginWithShopifyCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithShopifyCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithShopifyCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithShopifyCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithShopifyCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithShopifyCallbackResponseValidationError) ErrorName() string {
	return "LoginWithShopifyCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithShopifyCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithShopifyCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithShopifyCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithShopifyCallbackResponseValidationError{}
